apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
//        applicationId "com.ane.expresstokenapp"
        applicationId "com.ane.tokenapp"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
    }

    buildTypes {
        debug {
            //服务器地址
            //测试环境
            buildConfigField("String", "URL", "\"http://58.215.167.5:8080/\"")
            buildConfigField("String", "PATH", "\"services/pdaServerRest/operate\"")
            // 邱光益
//            buildConfigField("String", "URL", "\"http://192.168.3.165:8767/\"")
//            buildConfigField("String", "PATH", "\"kdWebservice/services/pdaServerRest/operate\"")
            //日志
            buildConfigField("boolean", "LOG_DEBUG", "true")
            //数据库版本
            buildConfigField("long", "DB_VERSION", "1")

            manifestPlaceholders = [
                    UMENG_APPKEY_VALUE: "598a6f15f43e485fef0018ef",
            ]

            minifyEnabled false
            jniDebuggable true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        preRelease {
            //服务器地址
            buildConfigField("String", "URL", "\"http://58.215.167.103:8080/\"")
            buildConfigField("String", "PATH", "\"services/pdaServerRest/operate\"")
            //日志
            buildConfigField("boolean", "LOG_DEBUG", "true")
            //数据库版本
            buildConfigField("long", "DB_VERSION", "1")

            manifestPlaceholders = [
                    UMENG_APPKEY_VALUE: "598a6f15f43e485fef0018ef",
            ]

            minifyEnabled false
            jniDebuggable true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            //服务器地址
            buildConfigField("String", "URL", "\"http://43.254.149.92:80/\"")
            buildConfigField("String", "PATH", "\"services/pdaServerRest/operate\"")
            //日志
            buildConfigField("boolean", "LOG_DEBUG", "false")
            //数据库版本
            buildConfigField("long", "DB_VERSION", "1")

            manifestPlaceholders = [
                    UMENG_APPKEY_VALUE: "598a6f15f43e485fef0018ef",
            ]

            minifyEnabled true//混淆
            debuggable false
            jniDebuggable false
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->
                renameAPK(variant, defaultConfig)
            }
        }
    }

    //多渠道打包
    productFlavors {
        ane {}

//        anbei {}
//        anfen {}
//        andzhuoyuan {}
//        pcsix {}
//        wandoujia {}
//        anzhuozhijia {}
//        youyi {}
//        baidu {}
//        c360 {}
//        yingyonbao{}
//        xiaomi{}
//        anzhi{}
//        sougou{}
//        lianxiang{}
//
//        huawei {}
//        sangxing{}

        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }
}

//发布应用市场apk命名
def renameAPK(variant, defaultConfig) {
    variant.outputs.each { output ->
        def formattedDate = new Date().format('yyyyMMddHHmmss')
        def appName = getAppName()
        def file = output.packageApplication.outputFile
        //发版时打开，开发时关闭
//        def fileName = appName + "_" + defaultConfig.versionName + "_" + formattedDate + "_" + variant.productFlavors[0].name + "_" + variant.buildType.name + ".apk"
        def fileName = "TokenApp_${variant.buildType.name}_v${defaultConfig.versionName}.apk"
        output.packageApplication.outputFile = new File(file.parent, fileName)
    }
}

def getAppName() {
    def stringsFile = android.sourceSets.main.res.sourceFiles.find { it.name.equals 'strings.xml' }
    return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'app_name' }.text()
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //support
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["recyclerview-v7"]
    compile rootProject.ext.dependencies["design"]

    //下拉刷新
    compile rootProject.ext.dependencies["xrefreshview"]

    //dagger2
    compile rootProject.ext.dependencies["dagger2"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]

    //glide
    compile rootProject.ext.dependencies["glide"]

    //gson
    compile rootProject.ext.dependencies["gson"]

    //multidex
    compile rootProject.ext.dependencies["multidex"]

    //network
    //retrofit
    compile rootProject.ext.dependencies["retrofit"]
    compile rootProject.ext.dependencies["retrofit-converter-gson"]
    compile rootProject.ext.dependencies["retrofit-adapter-rxjava2"]
    //okhttp
    compile rootProject.ext.dependencies["okhttp3"]
    compile rootProject.ext.dependencies["okhttp-logging-interceptor"]

    //rx
    compile rootProject.ext.dependencies["rxjava2"]
    compile rootProject.ext.dependencies["rxandroid2"]
    compile rootProject.ext.dependencies["rxlifecycle2"]
    compile rootProject.ext.dependencies["rxlifecycle2-components"]
    compile rootProject.ext.dependencies["rxpermissions2"]
    compile rootProject.ext.dependencies["rxerrorhandler2"]

    //zxing
    compile rootProject.ext.dependencies["zxing"]
    compile rootProject.ext.dependencies["bga-qrcodecore"]
    compile rootProject.ext.dependencies["bga-zxing"]

    //leakcanary
    debugCompile rootProject.ext.dependencies["leakcanary-android"]
    releaseCompile rootProject.ext.dependencies["leakcanary-android-no-op"]

    //umeng
    compile 'com.umeng.analytics:analytics:latest.integration'

    compile 'com.android.support.constraint:constraint-layout:1.0.2'
}

